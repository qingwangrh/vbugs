diff --git a/virttest/qemu_devices/qcontainer.py b/virttest/qemu_devices/qcontainer.py
index 3cc8519b..10f08842 100644
--- a/virttest/qemu_devices/qcontainer.py
+++ b/virttest/qemu_devices/qcontainer.py
@@ -24,6 +24,8 @@ from avocado.utils import process
 import six
 from six.moves import xrange
 
+from virttest.qemu_devices.qdevices import ThrottleGroupManager
+
 try:
     from collections.abc import Sequence
 except ImportError:
@@ -164,6 +166,11 @@ class DevContainer(object):
         self.__iothread_manager = None
         self.__iothread_supported_devices = set()
         self.temporary_image_snapshots = set()
+        self.throttle_group_manger = ThrottleGroupManager()
+
+    #wq
+    def get_throttle_group_manger(self):
+        return self.throttle_group_manger
 
     def initialize_iothread_manager(self, params, guestcpuinfo):
         """Initialize iothread manager.
@@ -1556,7 +1563,7 @@ class DevContainer(object):
                                    scsi=None, drv_extra_params=None,
                                    num_queues=None, bus_extra_params=None,
                                    force_fmt=None, image_encryption=None,
-                                   image_access=None):
+                                   image_access=None, image_filter_throttle=None):
         """
         Creates related devices by variables
         :note: To skip the argument use None, to disable it use False
@@ -1910,6 +1917,18 @@ class DevContainer(object):
             format_node.add_child_node(protocol_node)
             devices.append(protocol_node)
             devices.append(format_node)
+            top_node=format_node
+            # wq add filter node
+            if image_filter_throttle:
+                filter_node=qdevices.QBlockdevFilterThrottle(name,image_filter_throttle)
+                filter_node.add_child_node(format_node)
+                devices.append(filter_node)
+                top_node=filter_node
+                # devices.insert(-2,filter_node)
+                filter_node.set_param('file', format_node.get_qid())
+                format_node.set_param('file', protocol_node.get_qid())
+
+
         else:
             if self.has_hmp_cmd('__com.redhat_drive_add') and use_device:
                 devices.append(qdevices.QRHDrive(name))
@@ -1920,6 +1939,9 @@ class DevContainer(object):
             else:       # very old qemu without 'addr' support
                 devices.append(qdevices.QOldDrive(name, use_device))
 
+            format_node = devices[-1]
+            protocol_node = format_node
+
         if Flags.BLOCKDEV in self.caps:
             for opt, val in zip(('serial', 'boot'), (serial, boot)):
                 if val is not None:
@@ -1927,16 +1949,16 @@ class DevContainer(object):
                                  "on %s by -blockdev." % (opt, name))
             if media == 'cdrom':
                 readonly = 'on'
-            devices[-2].set_param('read-only', readonly, bool)
-            devices[-1].set_param('read-only', readonly, bool)
+            protocol_node.set_param('read-only', readonly, bool)
+            format_node.set_param('read-only', readonly, bool)
             if secret_obj:
-                if isinstance(devices[-1], qdevices.QBlockdevFormatQcow2):
-                    devices[-1].set_param('encrypt.format',
+                if isinstance(format_node, qdevices.QBlockdevFormatQcow2):
+                    format_node.set_param('encrypt.format',
                                           image_encryption.format)
-                    devices[-1].set_param('encrypt.key-secret',
+                    format_node.set_param('encrypt.key-secret',
                                           secret_obj.get_qid())
-                elif isinstance(devices[-1], qdevices.QBlockdevFormatLuks):
-                    devices[-1].set_param('key-secret', secret_obj.get_qid())
+                elif isinstance(format_node, qdevices.QBlockdevFormatLuks):
+                    format_node.set_param('key-secret', secret_obj.get_qid())
         else:
             devices[-1].set_param('if', 'none')
             devices[-1].set_param('rerror', rerror)
@@ -1959,12 +1981,12 @@ class DevContainer(object):
                 logging.warn('snapshot is on, fallback aio to threads.')
                 aio = 'threads'
             if Flags.BLOCKDEV in self.caps:
-                if isinstance(devices[-2], (qdevices.QBlockdevProtocolFile,
+                if isinstance(protocol_node, (qdevices.QBlockdevProtocolFile,
                                             qdevices.QBlockdevProtocolHostDevice,
                                             qdevices.QBlockdevProtocolHostCdrom)):
-                    devices[-2].set_param('aio', aio)
+                    protocol_node.set_param('aio', aio)
             else:
-                devices[-1].set_param('aio', aio)
+                format_node.set_param('aio', aio)
             if aio == 'native':
                 # Since qemu 2.6, aio=native has no effect without
                 # cache.direct=on or cache=none, It will be error out.
@@ -1978,26 +2000,26 @@ class DevContainer(object):
             if filename:
                 file_opts = qemu_storage.filename_to_file_opts(filename)
                 for key, value in six.iteritems(file_opts):
-                    devices[-2].set_param(key, value)
+                    protocol_node.set_param(key, value)
 
             if access_secret is not None:
                 if secret_type == 'password':
-                    devices[-2].set_param('password-secret',
+                    protocol_node.set_param('password-secret',
                                           access_secret_obj.get_qid())
                 elif secret_type == 'key':
-                    devices[-2].set_param('key-secret',
+                    protocol_node.set_param('key-secret',
                                           access_secret_obj.get_qid())
 
             if iscsi_initiator:
-                devices[-2].set_param('initiator-name', iscsi_initiator)
+                protocol_node.set_param('initiator-name', iscsi_initiator)
             if gluster_debug:
-                devices[-2].set_param('debug', int(gluster_debug))
+                protocol_node.set_param('debug', int(gluster_debug))
             if gluster_logfile:
-                devices[-2].set_param('logfile', gluster_logfile)
+                protocol_node.set_param('logfile', gluster_logfile)
             for key, value in six.iteritems(gluster_peers):
-                devices[-2].set_param(key, value)
+                protocol_node.set_param(key, value)
 
-            for dev in (devices[-1], devices[-2]):
+            for dev in (format_node, protocol_node):
                 if not cache:
                     direct, no_flush = (None, None)
                 else:
@@ -2005,7 +2027,8 @@ class DevContainer(object):
                                         self.cache_map[cache]['cache.no-flush'])
                 dev.set_param('cache.direct', direct)
                 dev.set_param('cache.no-flush', no_flush)
-            devices[-1].set_param('file', devices[-2].get_qid())
+
+            format_node.set_param('file', protocol_node.get_qid())
         else:
             devices[-1].set_param('cache', cache)
             devices[-1].set_param('media', media)
@@ -2037,8 +2060,8 @@ class DevContainer(object):
                 if Flags.BLOCKDEV in self.caps:
                     if key == 'discard':
                         value = re.sub('on', 'unmap', re.sub('off', 'ignore', value))
-                    devices[-2].set_param(key, value)
-                devices[-1].set_param(key, value)
+                    protocol_node.set_param(key, value)
+                format_node.set_param(key, value)
         if not use_device:
             if fmt and fmt.startswith('scsi-'):
                 if scsi_hba == 'lsi53c895a' or scsi_hba == 'spapr-vscsi':
@@ -2047,24 +2070,24 @@ class DevContainer(object):
                                    'pflash', 'virtio'):
                 raise virt_vm.VMDeviceNotSupportedError(self.vmname,
                                                         fmt)
-            devices[-1].set_param('if', fmt)    # overwrite previously set None
+            format_node.set_param('if', fmt)    # overwrite previously set None
             if not fmt:     # When fmt unspecified qemu uses ide
                 fmt = 'ide'
-            devices[-1].set_param('index', index)
+            format_node.set_param('index', index)
             if fmt == 'ide':
-                devices[-1].parent_bus = ({'type': fmt.upper(), 'atype': fmt},)
+                format_node.parent_bus = ({'type': fmt.upper(), 'atype': fmt},)
             elif fmt == 'scsi':
                 if arch.ARCH in ('ppc64', 'ppc64le'):
-                    devices[-1].parent_bus = ({'atype': 'spapr-vscsi',
+                    format_node.parent_bus = ({'atype': 'spapr-vscsi',
                                                'type': 'SCSI'},)
                 else:
-                    devices[-1].parent_bus = ({'atype': 'lsi53c895a',
+                    format_node.parent_bus = ({'atype': 'lsi53c895a',
                                                'type': 'SCSI'},)
             elif fmt == 'floppy':
-                devices[-1].parent_bus = ({'type': fmt},)
+                format_node.parent_bus = ({'type': fmt},)
             elif fmt == 'virtio':
-                devices[-1].set_param('addr', pci_addr)
-                devices[-1].parent_bus = (pci_bus,)
+                format_node.set_param('addr', pci_addr)
+                format_node.parent_bus = (pci_bus,)
             if not media == 'cdrom':
                 logging.warn("Using -drive fmt=xxx for %s is unsupported "
                              "method, false errors might occur.", name)
@@ -2073,6 +2096,7 @@ class DevContainer(object):
         #
         # Device
         #
+        # idx will change above
         devices.append(qdevices.QDevice(params={}, aobject=name))
         devices[-1].parent_bus += ({'busid': 'drive_%s' % name}, dev_parent)
         if fmt in ("ide", "ahci"):
@@ -2262,7 +2286,8 @@ class DevContainer(object):
                                                image_params.get(
                                                    "force_drive_format"),
                                                image_encryption,
-                                               image_access)
+                                               image_access,
+                                               image_params.get("image_filter_throttle"))
 
     def serials_define_by_variables(self, serial_id, serial_type, chardev_id,
                                     bus_type=None, serial_name=None,
@@ -2575,6 +2600,17 @@ class DevContainer(object):
                                 parent_bus=parent_bus,
                                 child_bus=bus)
 
+    # wq add
+    def throttle_group_define_by_params(self, params, name):
+        throttle_group_parameter = params.get(
+            "throttle_group_parameter_%s" % name,
+            params.get("throttle_group_parameter"))
+        return self.throttle_group_manger.create_throttle_group(name,
+                                                                throttle_group_parameter)
+
+
+
+
     def memory_object_define_by_params(self, params, name):
         """
         Create memory object from params, default backend type is
diff --git a/virttest/qemu_devices/qdevices.py b/virttest/qemu_devices/qdevices.py
index 6bc61601..4e4df700 100644
--- a/virttest/qemu_devices/qdevices.py
+++ b/virttest/qemu_devices/qdevices.py
@@ -657,12 +657,22 @@ class QBlockdevNode(QCustomDevice):
         super(QBlockdevNode, self).__init__(
             "blockdev", {}, aobject, (), child_bus)
 
-        if is_root:
-            self.params['node-name'] = '%s_%s' % ('drive', aobject)
-        else:
-            self.params['node-name'] = '%s_%s' % (self.TYPE, aobject)
+        self.is_root=is_root
+        # if is_root:
+        #     self.params['node-name'] = '%s_%s' % ('drive', aobject)
+        # else:
+        #     self.params['node-name'] = '%s_%s' % (self.TYPE, aobject)
+        self.set_root(is_root)
         self.set_param('driver', self.TYPE)
 
+    def set_root(self,flag):
+        self.is_root = flag
+        if self.is_root:
+            self.params['node-name'] = '%s_%s' % ('drive', self.aobject)
+        else:
+            self.params['node-name'] = '%s_%s' % (self.TYPE, self.aobject)
+
+
     @staticmethod
     def _convert_blkdev_args(args):
         """
@@ -783,6 +793,7 @@ class QBlockdevFormatNode(QBlockdevNode):
         :param node: the blockdev node which will be added.
         :type node: qdevices.QBlockdevNode
         """
+        node.set_root(False)
         self._child_nodes.append(node)
 
     def del_child_node(self, node):
@@ -884,6 +895,21 @@ class QBlockdevProtocolRBD(QBlockdevProtocol):
     TYPE = 'rbd'
 
 
+#wq
+class QBlockdevFilter(QBlockdevFormatNode):
+    pass
+
+
+class QBlockdevFilterThrottle(QBlockdevFilter):
+    TYPE= "throttle"
+
+    def __init__(self, aobject,group):
+
+        # busid='throttle_%s' % aobject
+        # print("throttle busid:"+busid)
+        super(QBlockdevFilterThrottle, self).__init__(aobject)
+        self.set_param("throttle-group",group)
+
 class QBlockdevProtocolGluster(QBlockdevProtocol):
     """ New a protocol gluster blockdev node. """
     TYPE = 'gluster'
@@ -1239,6 +1265,106 @@ class QIOThread(QObject):
         """Verify if it is unplugged from VM."""
         return not self._is_attached_to_qemu(monitor)
 
+#wq
+class QThrottleGroup(QObject):
+    """throttle-group object.
+    attributes of throttle-group
+
+    """
+    KEY_MAP_TABLE={"iops":"x-iops"}
+
+    def __init__(self, throttle_group_id, raw):
+        if not raw:
+            #set default
+            pass
+
+        self.raw=raw
+        l=[]
+        for item in raw.split(","):
+            l.append(tuple(item.split("=")))
+        params=dict(l)
+        params["id"] = throttle_group_id
+        kwargs = dict(backend="throttle-group", params=params)
+        super(QThrottleGroup, self).__init__(**kwargs)
+        self.set_aid(throttle_group_id)
+        self.hook_drive_bus = None
+
+    # def __init__(self, throttle_group_id, params=None):
+    #     if params is None:
+    #         params = dict()
+    #     params["id"] = throttle_group_id
+    #     kwargs = dict(backend="throttle-group", params=params)
+    #     super(QThrottleGroup, self).__init__(**kwargs)
+    #     self.set_aid(throttle_group_id)
+    #     # self.iothread_bus = QIOThreadBus(throttle_group_id)
+    #     # self.add_child_bus(self.iothread_bus)
+
+
+    # def unplug_hook(self):
+    #     """Remove iothread from attached devices' params."""
+    #     for device in self.iothread_bus:
+    #         device.set_param("iothread", None)
+    #
+    # def unplug_unhook(self):
+    #     """Reset attached devices' params."""
+    #     for device in self.iothread_bus:
+    #         device.set_param(self.get_qid())
+
+    def hotplug_qmp(self):
+        """Return hotplug qmp command string."""
+        params = dict(self.params)
+        backend = params.pop("backend")
+        iothread_id = params.pop("id")
+        kwargs = {"qom-type": backend, "id": iothread_id, "props": { "limits":params}}
+        return "object-add", kwargs
+
+    def _is_attached_to_qemu(self, monitor):
+        """Check if iothread is in use by QEMU."""
+        out = QIOThread._query(monitor)
+        return any(self.get_qid() == iothread["id"] for iothread in out)
+
+    def verify_hotplug(self, out, monitor):
+        """Verify if it is plugged into VM."""
+        return self._is_attached_to_qemu(monitor)
+
+    def verify_unplug(self, out, monitor):
+        """Verify if it is unplugged from VM."""
+        return not self._is_attached_to_qemu(monitor)
+
+
+class ThrottleGroupManager(object):
+    def __init__(self):
+        self.groups = {}
+
+    def set_monitor(self,monitor):
+        self.monitor=monitor
+
+    def create_throttle_group(self, throttle_group_id, raw_string):
+        self.groups[throttle_group_id]=QThrottleGroup(throttle_group_id,raw_string)
+        return self.groups[throttle_group_id]
+
+    #object-add
+    def add_throttle_group(self, throttle_group_id, raw_string,monitor=None):
+        pass
+    #object-del
+    def delete_throttle_group(self, throttle_group_id,monitor=None):
+        pass
+
+    #return QThrottleGroup
+    def get_throttle_group(self, throttle_group_id):
+        pass
+
+    def query_throttle_group(self, throttle_group_id,monitor=None):
+        pass
+
+    #qom-set
+    def update_throttle_group(self, throttle_group_id,raw_string,monitor=None):
+        pass
+
+    #x-blockdev-reopen
+    def change_blockdev_other_group(self,node_name,file,throttle_group_id,monitor=None):
+        pass
+
 
 class Memory(QObject):
 
diff --git a/virttest/qemu_vm.py b/virttest/qemu_vm.py
index a6d34929..0df0cba4 100644
--- a/virttest/qemu_vm.py
+++ b/virttest/qemu_vm.py
@@ -42,6 +42,7 @@ from virttest import utils_vsock
 from virttest import error_event
 from virttest.compat_52lts import decode_to_text
 from virttest.qemu_devices import qdevices, qcontainer
+from virttest.qemu_devices.qdevices import ThrottleGroupManager
 from virttest.qemu_devices.utils import DeviceError
 from virttest.qemu_capabilities import Flags
 
@@ -202,6 +203,7 @@ class VM(virt_vm.BaseVM):
         self.last_boot_index = 0
         self.last_driver_index = 0
 
+
     def check_capability(self, capability):
         """
         Check whether the given capability is set in the vm capabilities.
@@ -1831,6 +1833,12 @@ class VM(virt_vm.BaseVM):
         # initialize iothread manager
         devices.initialize_iothread_manager(params, self.cpuinfo)
 
+        # TODO Wq add object throttle command line
+
+        for throttle_group in params.get("throttle_groups",
+                                         "").strip().split():
+            devices.insert(devices.throttle_group_define_by_params(params,throttle_group))
+
         # Add images (harddrives)
         for image_name in params.objects("images"):
             # FIXME: Use qemu_devices for handling indexes
